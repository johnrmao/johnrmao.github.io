#+TITLE: Lecture 1
#+SETUPFILE: ../template-1.org


*** In this section:
+[[Usage]]

+[[Connecting Programs]]

+[[Users]]

*  The Shell
** Usage
+ The command =date= will print the current date.
    : RESULTS:
    : Mon 13 Jul 2020 01:16:10 PDT
+ Shell commands can also be executed with /arguments./
  #+BEGIN_SRC shell
echo hello
  #+END_SRC

  #+RESULTS:
  : hello

  : RESULTS:
  : hello

  In this case, ~echo~ was the command, and ~hello~ was the argument.
  The echo command will print out its arguments.
  + In order to parse arguments which are multiple words long, use ~'~ or ~"~ .
    You could also use ~\~ to escape relevant characters.


+ ~which~ can be used to find the location of which program is being executed.
  #+BEGIN_SRC shell
which python
  #+END_SRC

  #+RESULTS:
  : /usr/bin/python

  : RESULTS:
  : /usr/bin/python

** Connecting Programs
+ Programs contain *two* streams, an input and an output. Programs will read from the input stream and print into the output stream.

  This way, it is possible to change the the input or output away from the terminal and reroute those streams.

  + ~< file~ and ~> file~ can both be easily used to redirect the input and output streams.

    #+BEGIN_SRC shell
echo hello > hello.txt
cat < hello.txt > hello2.txt
    #+END_SRC

    #+RESULTS:

    This print the argument of ~echo~, which is ~hello~, into =hello.txt=. Then, it will print the contents of =hello.txt= using the ~cat~ command, and pipe it into =hello2.txt=.

  + Furthermore, the use of ~|~ will allow you to "chain" commands together so that the output of one is the input of another.
    #+BEGIN_SRC shell
cat coolfile.txt | grep 'cool text'
    #+END_SRC

    #+RESULTS:

    This will print the contents of =coolfile.txt= and then ~grep~ for the string =cool text=.

** Users
+ The *root* user has /almost/ all access restrictions, including being able to read, write, update, and delete any file within a system.
  + The ~sudo~ command will let you /do/ something as a /su/per user, or root.

+ An example would be chaing the brightness of your laptop through writing directly to the =sysfs=.
  #+BEGIN_SRC shell
sudo echo 3 > brightness
  #+END_SRC

  #+RESULTS:

  + This will return an error as you must be a root user to write into =sys/*=.
    
    The ~sudo~ in this case is acting upon the echo, and does not apply in attempting to write to a file.
  + In this case, you must first ~echo 3~, then write that output into =brightness=.
     #+BEGIN_SRC shell
echo 3 | sudo tee brightness
     #+END_SRC

     #+RESULTS:

     This *would* work as you're writing using ~tee~ as  a root user.


------
+ [[file:lecture-2.org][lecture 2]]

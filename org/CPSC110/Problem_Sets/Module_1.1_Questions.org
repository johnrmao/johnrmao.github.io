#+TITLE: Module 1A Questions
#+SETUPFILE: ../../template-2.org
Created on 2020-07-17/15:54


* Module 1 Questions
** Expressions
+ *Question 1*
file:../../screenshots/M1S1Q1.png

#+BEGIN_SRC racket
(sqrt (+ (sqr 3) (sqr 4)))

#+END_SRC

#+RESULTS:
: 5

: RESULTS:
: 5

 + /this is pretty much the most difficult math seen in this course/


+ *Question 2*
  + If you see #i2.718281828459045 appear in the interaction pane, it means:
    1. It's an imaginary number.
    2. Someone just sent a strange tweet.
    3. /It's a number very close to 2.718281828459045./  <-
    4. I thought you said there wouldn't be much math!


+ *Question 3*
  + Which of the following are expressions:
    1. src_racket{sqr} {{{results(=#<procedure:sqr>=)}}}

    2. src_racket{(+ 2 3)} {{{results(=5=)}}}  <-

    3. src_racket{+} {{{results(=#<procedure:+>=)}}}

    4. src_racket{(sqrt 2)} {{{results(=1.4142135623730951=)}}}i  <-

    5. src_racket{#i1.4142135623730951} {{{results(=1.4142135623730951=)}}}  <-

    6. src_racket{1} {{{results(=1=)}}}  <-

    7. src_racket{)}


  + /At this point in the course an expression is either a value, or of the form src_racket{(<primitive> <expression> ...)}. We will shortly add to our vocabulary of expressions./


+ *Question 4*
  + Which of the folloing are values:
    1. src_racket{sqr}

    2. src_racket{(+ 2 3)}

    3. src_racket{+}

    4. src_racket{(sqrt 2)}

    5. src_racket{#i1.4142135623730951}  <-

    6. src_racket{1}  <-

    7. src_racket{)}


+ *Question 5*
  + What would be the result of evaluating the following expression:
  + src_racket{(/ (* 2 3) (- 3 1))}
    1. 18

    2. 6

    3. 2

    4. 3  <-


+ *Question 6*
  + Recall that the average of a set of numbers is the sum of the numbers divided by how many numbers there are.

    Which of these expressions produces the average of the numbers 4, 6.2 and -12? Check ALL that are correct.
    1. src_racket{(/ 3 (+ 6.2 -12 4))}

    2. src_racket{(/ (+ -8 6.2) 3)}  <-

    3. src_racket{(/ (+ 4 6.2 -12) 3)}  <-

    4. src_racket{-0.6}  <-


+ *Question 7*
  + Why are we using Beginning Student Language in this course? Select all answers that apply.
    1. /It is simple to learn, allowing you to focus your attention on the design methods correct/ 
    2. It is commonly used in industry, so you can get a job programming in BSL
    3. /It forms the core of many other languages, which will help you transfer what you learn to other languages correct/
    4. /There are so many popular programming languages that no single language will be useful for many projects correct/


** Evaluation
+ *Question 1*
  + Consider the following expression:
  + src_racket{(* (- 4 2) 3)}
  + Select all calls to primitives.
    1. src_racket{(* (- 4 2) 3)}  <-

    2. src_racket{*}

    3. src_racket{(- 4 2)}  <-

    4. src_racket{3}

    5. src_racket{-}

    6. src_racket{4}

    7. src_racket{2}
       
  + src_racket{(* (- 4 2) 3) } and src_racket{(- 4 2)} are primitive calls because they are expressions that start with open parenthesis and the name of a primitive operation.


+ *Question 2*
  + Consider the following expression:
  + src_racket{(* (- 4 2) 3)}
  + Select all the operators.
    1. src_racket{(* (- 4 2) 3)}
    2. src_racket{(*)}  <-
    3. src_racket{(- 4 2)}
    4. src_racket{3}
    5. src_racket{-}  <-
    6. src_racket{4}
    7. src_racket{2}


+ *Question 3*
  + Consider the following expression:
  + src_racket{(* (- 4 2) 3)}
  + Select all operands.
    1. src_racket{(* (- 4 2) 3)}
    2. src_racket{(*)}
    3. src_racket{(- 4 2)}  <-
    4. src_racket{3}  <-
    5. src_racket{-}
    6. src_racket{4}  <-
    7. src_racket{2}  <-


+ *Question 4*
  + What is the next step in the following evaluation?
    1. src_racket{(/ (* 3 4) (+ (- 7 4) 3))}
    2. src_racket{(/ 12 (+ (- 7 4) 3))}
       - src_racket{(/ 12 (+ 3 3))}


+ *Question 5*
  + What is the next step in the following evaluation?
    1. src_racket{(/ (* 3 4) (+ (- 7 4) 3))}
    2. src_racket{(/ 12 (+ (- 7 4) 3))}
    3. src_racket{(/ 12 (+ 3 3))}
       - src_racket{(/ 12 6)}


+ *Question 6*
  + What is the next step in the following evaluation?
    1. src_racket{(/ (* 3 4) (+ (- 7 4) 3))}
    2. src_racket{(/ 12 (+ (- 7 4) 3))}
    3. src_racket{(/ 12 (+ 3 3))}
    4. src_racket{(/ 12 6)}
       - src_racket{2}


** Strings and Images
+ *Question 1*
 + What is the value of the expression below?
 + src_racket{(substring "hello" 1 3)}
   1. src_racket{"hello"}
   2. src_racket{"hel"}
   3. src_racket{"ell"}
   4. src_racket{"el"}  <-
   5. src_racket{"he"}


+ *Question 2*
  + Will the following produce any errors?
  + src_racket{(string-append "1" "2")}
    1. Yes
    2. /No/  <-


+ *Question 3*
  + Which primitive is required in the following expression to produce the stop sign image below?
    #+BEGIN_SRC racket
(______ (text "STOP" 48 "white")
        (regular-polygon 60 8 "solid" "red"))
    #+END_SRC
file:../../screenshots/M1S3Q3.png
    1. above
    2. beside
    3. /overlay/  <-
    4. append


+ *Question 4*
  + Which image will the following expression produce?
    #+BEGIN_SRC racket
(beside (square 20 "outline" "blue")
        (above (circle 15 "solid" "red")
               (triangle 20 "solid" "green")))
    #+END_SRC
    1. file:../../screenshots/M1S3Q4A1.png
    2. file:../../screenshots/M1S3Q4A2.png
    3. file:../../screenshots/M1S3Q4A3.png
    4. file:../../screenshots/M1S3Q4A4.png

+ The above will produce image 2.


+ *Question 5*
  + Assume that the image below shows an entire program file. Why does running the program produce the following error?
    file:../../screenshots/M1S3Q5.png
    1. We didn't define a function named src_racket{above} in the program.
    2. /We didn't include src_racket{(require 2htdp/image)} at the beginning of the program./  <-
    3. src_racket{above} does not accept a square as an argument.


+ *Question 6*
  + We have revised the program now, why are we still getting an error?
    file:../../screenshots/M1S3Q5.png
    1. We still need to define a function named above.
    2. We need to find the collection "2htpd."
    3. /We misspelled the name of the required module, so we need to replace "2htpd" with "2htdp."/ <--


** Constant Definitions
+ *Question 1*
  + Consider the following program:
  + What result is produced when the program is run?
#+BEGIN_SRC racket
(define FOO (* 2 3))
; FOO = 6
(define BAR (* FOO 2))
; BAR = 12

(* FOO BAR)
; (* FOO BAR) = (* 6 12) = 72
#+END_SRC
: RESULTS:
: 72


+ *Question 2*
  + Given the following program:
    #+BEGIN_SRC racket
(define FOO (* 2 3))
(define BAR (* FOO 2))

(* FOO BAR)
    #+END_SRC
  + What is the result of the *first* evaluation step?
     1.
           #+BEGIN_SRC racket
    (define FOO (* 2 3))
    (define BAR (* FOO 2))

    (* (* 2 3) BAR)
           #+END_SRC
     2.
           #+BEGIN_SRC racket
    (define FOO (* 2 3))
    (define BAR (* FOO 2))

    (* 6 BAR)
           #+END_SRC
     3.
           #+BEGIN_SRC racket
    (define FOO (* 2 3))
    (define BAR (* (* 2 3) 2))

    (* FOO BAR)
           #+END_SRC
     4.
          #+BEGIN_SRC racket
   (define FOO 6)
   (define BAR (* FOO 2))

   (* FOO BAR)
          #+END_SRC
  + Answer is *#4*.


** Function Definitions
+ *Question 1*
  + Why should you use function definitions?
    1. To be lazy
    2. To make the code easier to read
    3. To avoid duplicated code
    4. /All of the above/   <-


+ *Question 2*
  + Suppose we want a function that will give the length of the hypotenuse of any right angle triangle. Which of the following would achieve that? Remember that the expression we used when the side lengths were 3 and 4 was: src_racket{(sqrt (+ (sqr 3) (sqr 4)))}
    1.
          #+BEGIN_SRC racket
   (define (pythag 3 4)
     (sqrt (+ (sqr 3) (sqr4))))
          #+END_SRC
    2.
          #+BEGIN_SRC racket
   (sqrt (+ (sqr a) (sqr b)))

          #+END_SRC
    3.
          #+BEGIN_SRC racket
   (define c (sqrt (+ (sqr a) (sqr b))))
          #+END_SRC
    4.
         #+BEGIN_SRC racket
  (define (pythag a b)
    (sqrt (+ (sqr a) (sqr b))))
         #+END_SRC

  + Answer is *$4*.


+ *Question 3*
  + What should we do to fix the following error:
   file:../../screenshots/M1S4Q3.png
    1. Replace =i= in the program
    2. Include src_racket{(require 2htdp/image)} at the beginning of the program
    3. /Replace =i= with =img=, which is the name of the parameter for this function/  <-


+ *Question 4*
  + Given the function:
    #+BEGIN_SRC racket
(define (foo a b)
  (+ (* 3 a)
     b
    (* b a)))
    #+END_SRC
  + What is the first step of src_racket{(foo (+ 1 1) 4)}, and what is the result of that step?
    1. Replace =a= and =b= with src_racket{(+ 1 1)} and 4 everywhere.
       #+BEGIN_SRC racket
(define (foo (+ 1 1) 4)
  (+ (* 3 (+ 1 1))
     4
     (* 4 (+ 1 1)))

(foo 2 4)
       #+END_SRC

    2. Replace src_racket{(foo 2 4)} with the body of =foo= in which we replace all occurrences of =a= with src_racket{(+ 1 1)}, and =b= with 4.
       #+BEGIN_SRC racket
(+ (* 3 2)
   4
   (* 4 2))
       #+END_SRC

    3. /Evaluate src_racket{(+ 1 1)} and replace it in the function call of =foo=./  <--
       #+BEGIN_SRC racket
(foo 2 4)
       #+END_SRC


+ *Question 5*
  + After the previous step of the evaluation we are left with:
    #+BEGIN_SRC racket
(foo (+1 1) 4) ; into
(foo 2 4)
    #+END_SRC
  + What is the next step of the evaluation and what does that leave us with?
    1. Replace =a= and =b= with 2 and 4 everywhere.
       #+BEGIN_SRC racket
(define (foo 2 4)
  (+ (* 3 2)
     4
     (* 4 2)))

(foo 2 4)
       #+END_SRC

    2. /Replace src_racket{(foo 2 4)} with the body of =foo= in which we replace all occurrences of =a= with 2, and =b= with 4./  <-
       #+BEGIN_SRC racket
(+ (* 3 2)
   4
   (* 4 2))
       #+END_SRC

    3. Replace src_racket{(foo 2 4)} with the body of =foo=.
       #+BEGIN_SRC racket
(+ (* 3 a)
   b
   (* b a))
       #+END_SRC


+ *Question 6*
  + After the previous step of the evaluation we are left with:
    #+BEGIN_SRC racket
(foo (+ 1 1) 4) ;into
(foo 2 4) ; into
(+ (* 3 2)
   4
   (* 4 2))
    #+END_SRC
  + What is the next step of evaluation and what does that leave us with?
    1. src_racket{(* 3 2)} is replaced with 6 and src_racket{(* 4 2)} is replaced with 8.
       #+BEGIN_SRC racket
(+ 6
   4
  8)
       #+END_SRC
    2. src_racket{(* 4 2)} is replaced with 8.
       #+BEGIN_SRC racket
(+ (* 3 2)
   4
   8)
       #+END_SRC
    3. /src_racket{(* 3 2)} is replaced with 6./  <-
       #+BEGIN_SRC racket
(+ 6
   4
   (* 4 2)))
       #+END_SRC


+ *Question 7*
  + After the previous step of evaluation we are left with:
    #+BEGIN_SRC racket
(foo (+ 1 1) 4) ;into
(foo 2 4) ;into

(+ (* 3 2)
   4
   (* 4 2)) ;into

(+ 6
   4
   (* 4 2))
    #+END_SRC
  + What is the next step of evaluation and what does that leave us with?
    1. 6 and 4 are added to produce 10.
       #+BEGIN_SRC racket
(+ 10
   (* 4 2))
       #+END_SRC

    2. /src_racket{(* 4 2)} is replaced with 8./  <-
       #+BEGIN_SRC racket
(+ 6
   4
   8)
       #+END_SRC

    3. src_racket{(* 4 2)} is replaced with 8 and 4, 6, and 8, are aded together.
       #+BEGIN_SRC racket
18
       #+END_SRC


+ *Question 8*
  + After the previous step of the evaluation we are left with:
    #+BEGIN_SRC racket
(foo (+ 1 1) 4) ;into
(foo 2 4) ;into

(+ (* 3 2)
   4
   (* 4 2)) ;into

(+ 6
   4
   (* 4 2)) ;into

(+ 6
   4
   8)
    #+END_SRC
  + What is the next step of the evaluation and what does that leave us with?
    1. 6 and 4 are added to produce 10.
       #+BEGIN_SRC racket
(+ 10
   8)
       #+END_SRC

    2. 6, 4, and 8 are added to produce 14.
       #+BEGIN_SRC racket
14
       #+END_SRC

    3. /6, 4, and 8 are added to produce 18./  <-
       #+BEGIN_SRC racket
18
       #+END_SRC



** Booleans and if expressions
+ *Question 1*
  + What is the value of the expression below?
    #+BEGIN_SRC racket
(> 10 5)
    #+END_SRC
    1. src_racket{true}   <-
    2. src_racket{false}
    3. src_racket{"true"}
    4. src_racket{"false"}


+ *Question 2*
  + What about this one?
    #+BEGIN_SRC racket
(> 5 5)
    #+END_SRC
    1. src_racket{true}
    2. src_racket{false}  <-
    3. src_racket{"true"}
    4. src_racket{"false"}


+ *Question 3*
  + Which of the following are predicates? Select all that apply.
    1. +
    2. =  <-
    3. string=?  <-
    4. string-append


+ *Question 4*
  + Which of the followin expressions produces src_racket{true} only when the width of an src_racket{img1} is greater than 50 pixels?
    1. src_racket{(> (image-width IMG1 50))}
    2. src_racket{(> (image-width IMG1) 50)}  <-
    3. src_racket{(>= (image-width IMG1) 50)}
    4. src_racket{(> 50 (image-width IMG1))}


+ *Question 5*
  + How can we fix the following error:
    file:../../screenshots/M1S6Q5.png
    1. Remove the '(' before if.
    2. Add ')' after I2) at the end of the code above.
    3. Add ')' after (image-width I1)
    4. Add ')' after (image-width I2)  <-
        #+BEGIN_SRC racket
;it should be
(if (< (image-width I1)
       (image-width I2))
    I1
    I2)
        #+END_SRC


+ *Question 6*
  + What is the value of the src_racket{if} expression below?
    #+BEGIN_SRC racket
(if (> (string-length "hello") 10)
    "long"
    "short")
    #+END_SRC

    : RESULTS:
    : "short"

    1. src_racket{true}
    2. src_racket{false}
    3. src_racket{"long"}
    4. src_racket{"short"} <-


+ *Question 7*
  + What is the value of the expression below?
    #+BEGIN_SRC racket
(or (< 2 1)
    (> 3 2)
    (= 4 4))
    #+END_SRC
    1. src_racket{true}  <-
    2. src_racket{false}


+ *Question 8*
  + Which comparisons can be performed when the expression below is evaluated?
    #+BEGIN_SRC racket
(or (< 2 1)
    (> 3 2)
    (= 4 4))
    #+END_SRC
    1. Just the <
    2. Just the >
    3. /The < and the >/   <-
    4. All three, <, >, =
        + an src_racket{or} expression will short-circuit and return src_racket{true} as soon as an expression returns true.


+ *Question 9*
  + Given:
    #+BEGIN_SRC racket
(define B1 true)
(define B2 false)
    #+END_SRC
  + What is the value of:
    #+BEGIN_SRC racket
(or (not B1) B2)
    #+END_SRC
    1. src_racket{true}
    2. src_racket{false}  <-
       + src_racket{(not B1)} is src_racket{false} and =B2= is also defined as src_racket{false}.



* Extra Practice
** More Arithmetic Expressions
+ Write two expressions that multiply the numbers 3, 5 and 7.
+ The first should take advantage of the fact that * can accept more than 2 arguments.
+ The second should build up the result by first multiplying 3 times 5 and then multiply the result of that by 7.
  #+BEGIN_SRC racket
(* 3 5 7)
(* (* 3 5) 7)
  #+END_SRC

  : RESULTS:
  : 105


** Tile
+ Use the DrRacket square, beside and above functions to create an image like this one:
file:../../screenshots/M1P3.png
#+BEGIN_SRC racket
(require 2htdp/image)
(define blue (square 20 "solid" "blue"))
(define yellow (square 20 "solid" "yellow"))
(define top (beside blue yellow))
(define bot (beside yellow blue))
(define image (above top bot))
image
#+END_SRC


** Compare Images
+ Based on the two constants provided, write three expressions to determine whether:
  1) IMAGE1 is taller than IMAGE2
  2) IMAGE1 is narrower than IMAGE2
  3) IMAGE1 has both the same width AND height as IMAGE2

#+BEGIN_SRC racket
(require 2htdp/image)

(define IMAGE1 (rectangle 10 15 "solid" "red"))
(define IMAGE2 (rectangle 15 10 "solid" "red"))

(if (> (image-height IMAGE1) (image-width IMAGE2))
    "IMAGE1 is taller"
    "IMAGE2 is taller"
    )

(if (< (image-width IMAGE1) (image-width IMAGE2))
    "IMAGE1 is narrower"
    "IMAGE2 is narrower"
    )

(if (and (= (image-width IMAGE1) (image-width IMAGE2))
     (= (image-height IMAGE1) (image-height IMAGE2))
     )
    "true"
    "false")
#+END_SRC

: RESULTS:
: "IMAGE2 is taller"
: "IMAGE1 is narrower"
: "false"

** Function Writing
+ Write a function that consumes two numbers and produces the larger of the two.
#+BEGIN_SRC racket
(define compare
  (lambda (a b)
    (if (> a b)
        a
        b
     )
    ))


(compare 5 2)
#+END_SRC

: RESULTS:
: 5


* Intro lab questions


** Problem 1
+ Use string primitives to create an expression that concatenates =prefix= and =suffix= and adds "_" between them (so you get "hello_world" when you run the program).
  #+BEGIN_SRC racket
(define (concat a b)
  (string-append a "_" b)
  )

(concat "hello" "world")
  #+END_SRC

  : RESULTS:
  : "hello_world"



** Problem 2
+ Use string primitives to create an expression that adds "_" at position i (the position that is i characters from the left of the string).  Again, in this particular example, the expected result is "hello_world".
  #+BEGIN_SRC racket
(define addunderscore
  (lambda (phrase i)
    (string-append (substring phrase 0 i) "_" (substring phrase i (string-length phrase))
   ) ; this append the substring of index 0-i to "_" to the substring of index i-(string-length phrase)
  )
)
(addunderscore "helloworld" 5)
  #+END_SRC

  : RESULTS:
  : "hello_world"


** Problem 3
+ Create an expression that counts the number of pixels in the CAT image.
  + /i don't have the cat image, but this should still work./
  #+BEGIN_SRC racket
(require 2htdp/image)
(* (image-width M1P3.png) (image-height M1P3.png))
  #+END_SRC


** Problem 4
+ Create an expression that computes whether CAT is "tall" (height is larger than its width), "wide" (width is larger than its height), or "square" (height is the same as its width).
#+BEGIN_SRC racket
(require 2htdp/image)
(define imagecheck
  (lambda (image1)
    (if (> (image-height image1) (image-width image1))
        "tall" ; returns true if image is taller
        (if (= (image-height image1) (image-width image1)) ; if not, it will check if it's square or wide
            "square"
            "wide")
        )
    )
  )

(imagecheck (rectangle 20 20 "solid" "red"))
(imagecheck (rectangle 20 30 "solid" "red"))
(imagecheck (rectangle 30 20 "solid" "red"))
#+END_SRC

: RESULTS:
: "square"
: "tall"
: "wide"

** Problem 5
+ Create an expression that computes whether the first character in STR is "h". In this example, the expected result is true.
#+BEGIN_SRC racket
(define checkifh
  (lambda (phrase)
    (string-ci=? (string-ith phrase 0) "h") ; checks if the first letter of phrase is equal to "h"
    )
  )

(checkifh "hello_world")
(checkifh "bye_world")
#+END_SRC

: RESULTS:
: #true
: #false

#+TITLE: Module 1B
#+SETUPFILE: ../template-1.org
Created on 2020-08-03/21:30


[[file:Problem_Sets/Module_1B_Questions.org][Module 1B Questions]]

* Learning Goals
+ Be able to use the How to Design Functions (HtDF) recipe to design functions that operate on primitive data.
+ Be able to read a complete function design and identify its different elements.
+ Be able to evaluate the different elements for clarity, simplicity and consistency with each other.
+ Be able to evaluate the entire design for how well it solves the given problem.


* Full Speed HtDF Recipe
+ HtDF recipe systematizes the design of a function.
  + The design recipe dictates the steps taken throughout the design of a function.


+ HtDF can make harder problems easy by breaking it down, but it also makes easy problems cumbersome.
  + It is important to use HtDF recipe regarding hard functions.


** Problem
+ Design a function that consumes a number and produces twice that number. Call your function double. Follow the HtDF recipe and show the stub and template.


+ The design method goes as follows:
  1. Signature, purpose and stub.
  2. Define examples, wrap each in =check-expect=.
  3. Template eand inventory.
  4. Code the funciton body.
  5. Test and debug until correct.
     + The detailed list can be found [[https://edge.edx.org/courses/course-v1:UBC+CPSC110+2017W1/77860a93562d40bda45e452ea064998b/#HtDF][here.]]


#+BEGIN_SRC racket
;; Number -> Number  Signature
;; produce 2 times the given number  Purpose

(check-expect (double 3) 6)  ; Examples/tests
(check-expect (double 4.2) 8.4)

(define (double n) 0)  ; this is the stub
#+END_SRC

: RESULTS:
: Check failures:
: 	Actual value 0 differs from 6, the expected value.
: in double-starter.rkt, line 9, column 0
: 	Actual value 0 differs from 8.4, the expected value.
: in double-starter.rkt, line 10, column 0


+ Currently, this example will fail as expected, but the fact that they ran means that the examples are well formed.



+ The next step is the template step.


#+BEGIN_SRC racket
;; Number -> Number  Signature
;; produce 2 times the given number  Purpose

(check-expect (double 3) 6)  ; Examples/tests
(check-expect (double 4.2) (* 2 4.2))

;(define (double n) 0)  ; this is the stub

;(define (double n)  ; this is the template
;  (... n)
;  )

(define (double n)  ; function body
  (* 2 n)
  )
#+END_SRC

: RESULTS:
: Both tests passed!


* Slow Motion HtDF Recipe
** Designing a function
+ Design a function that consumes a number and produces twice that number.
+ Call your function double. Follow the HtDF recipe and leave behind commented out versions of the stub and template.


*** Signature
   + Type ... -> Type
   + Declares type of data function consumes and produces.
     + For now, the primitive types are:
       | Number | Integer | Natural |
       | String | Image   | Boolean |

   #+BEGIN_SRC racket
;; Number -> Number
;; Describes that the function consumes a Number and produces a Number
   #+END_SRC


*** Purpose
   + A purpose is a /1 line/ description of what the function produces in terms of what it consumes.

   #+BEGIN_SRC racket
;; produces 2 times the given number
   #+END_SRC


*** The Stub
   + The stub is a function definition that:
     1. has correct function name
     2. has correct number of parameters
     3. produces dummy result of correct type

   #+BEGIN_SRC racket
(define (double n) 0)  ; this is the stub
   #+END_SRC


*** Examples/Tests
  + Examples help us understand what the function must do.
  + Multiple examples illustrate behavior.
  + Wrapping in check-expect means they will also serve as unit tests for the completed function.


   #+BEGIN_SRC racket
(check-expect (double 3) 6)
(check-expect (double 4.2) 8.4)

(define (double n) 0)
  #+END_SRC

+ In this case, both check-expects will fail, but it's a good sign that the tests ran in the first place.
  + Currently, the stub will always produce =0= so it is expected for the test to fail.
  + As programs get large, it is important to make sure that all the functions are well formed.



+ It is important to note that each step of the recipe is designed to help the steps after it.


*** Inventory - Templates & Constants
+ The template is the outline of the final function.
+ For now, the body of the template is src_racket{(... x)} where x is the parameter to the function.
+ A copy of the template will be made for the next step, and the original template will be commented out.
  + Later in the course, it is okay to delete it, but it will be kept in right now for learning purposes.


  #+BEGIN_SRC racket
(define (double n) ; this is the template
  (... n))
  #+END_SRC


*** Code Body
+ Use /everything written before/ to know how to complete the function body.
  + It sometimes helps to use elaborate examples to show /how/ the expected values could have been produced.

#+BEGIN_SRC racket
(check-expect (double 3) (* 2 3)) ; this is an elaboration on the example which makes the goal clearer
;; we now know how to finish the function, replace the ... with the body

(define (double n)
  (* 2 n)) ;
#+END_SRC

*** Test and Debugging
+ Run the current code and it should pass without issue.
+ It will be discussed later on how to debug when the code doesn't run correctly.


*** Final example
#+BEGIN_SRC racket
;; by now, the code should look like this after each step

;; Number -> Number
;; produce 2 times the given number
(check-expect (double 3) 6)
(check-expect (double 4.2) (* 2 4.2))

; (define (double n) 0) ; this is the stub

; (define (double n)    ; this is the template
;    (... n))

(define (double n)
  (* 2 n))
#+END_SRC


** Example - yell!
+ PROBLEM:

+ DESIGN a function called yell that consumes strings like "hello" and adds "!" to produce strings like "hello!".

+ Remember, when we say DESIGN, we mean follow the recipe.

+ Leave behind commented out versions of the stub and template.

#+BEGIN_SRC racket
;; String -> String
;; Produce the given string with "s" added to the end

(check-expect (yell "hello") "hello!")
(check-expect (yell "bye") "bye!")

; (define (yell str) "") ;stub

;(define (yell str) ;template
;  (... str))

(define (yell str)
  (string-append s "!"))
#+END_SRC

#+TITLE: Module 2
#+SETUPFILE: ../template-1.org
Created on 2020-08-06/00:36

* Learning Goals
+ Be able to use the How to Design Data Definitions (HtDD) recipe to design data  definitions for atomic data.
+ Be able to identify problem domain information that should be represented as simple atomic data, intervals, enumerations, itemizations and mixed data itemizations.
+ Be able to use the Data Driven Templates recipe to generate templates for functions operating on atomic data
+ Be able to use the How to Design Functions (HtDF) recipe to design functions operating on atomic data.


* cond Expressions
+ =cond= expression simplify writing conditional expressions with more than 2 cases.
#+BEGIN_SRC racket
;; To form cond expression
  (cond [<expression> <expression>]
        ...) ; one or more questions answer pairs

;; Each question must evaluate to a boolean
;; Last question can be else.

#+END_SRC

+ Given the following:
  #+BEGIN_SRC racket
(require 2htdp/image)

;; cond-starter.rkt

(define I1 (rectangle 10 20 "solid" "red"))
(define I2 (rectangle 20 20 "solid" "red"))
(define I3 (rectangle 20 10 "solid" "red"))

;; Image -> String
;; produce shape of image, one of "tall", "square" or "wide"
(check-expect (aspect-ratio I1) "tall")
(check-expect (aspect-ratio I2) "square")
(check-expect (aspect-ratio I3) "wide")

;(define (aspect-ratio img) "")  ;stub

;(define (aspect-ratio img)      ;template
;  (... img))

(define (aspect-ratio img)
  (if (> (image-height img) (image-width img))
      "tall"
      (if (= (image-height img) (image-width img))
          "square"
          "wide")))
  #+END_SRC


+ This function defines three constants, I1, I2, I3.
  + All three are rectangles


+ The function consumes an image and produces a string, one of "tall", "square", or "wide".
+ The issue with the function above is that there are 2 cases nested within the =if=.


+ =cond= is a /multi-armed conditional./
  + It can have any number of cases all at the same level.

  #+BEGIN_SRC racket
(require 2htdp/image)

#;
(define (aspect-ratio img)
  (if (> (image-height img) (image-width img))
      "tall"
      (if (= (image-height img) (image-width img))
          "square"
          "wide")))

(define (aspect-ratio img) ; () and [] balance each other.
;; Both are equavalent but by convention, we use[ ] around question/answer pairs in cond.
  (cond [(> (image-height img) (image-width img)) "tall"]
        [(= (image-height img) (image-width img)) "square"]
        [else "wide"]))
  #+END_SRC


** Evaluating cond
+ *To evaluate a cond expression*
#+BEGIN_SRC racket
(cond [(> 1 2) "bigger"]
      [(= 1 2) "equal"]
      [(< 1 2) "smaller"])

(cond [false "bigger"]
      [(= 1 2) "equal"]
      [(< 1 2) "smaller"])

(cond [(= 1 2) "equal"]
      [(< 1 2) "smaller"])

(cond [false "equal"]
      [(< 1 2) "smaller"])

(cond [true "smaller"])

"smaller"
;done evaluating
#+END_SRC
------
1. If there are no question/answer pairs, signal an error.
2. If the first question is not a value, evaluate it and replace it with its value.
   * That is, replace the entire cond with a new cond in which the first question has been replaced by its value.
     #+BEGIN_SRC racket
(cond [false "bigger"]
      [(= 1 2) "equal"]
      [(< 1 2) "smaller"])
#+END_SRC

3. If the first question is true or else, replace the entire cond expression with the first answer.
4. If the first question is false drop the first question/answer pair.
   * That is, replace the cond with a new cond that does not have the first question/answer pair.
5. Since the first question is not, ture or false, signal an error.



+ For function calls, =if= and =cond= all work by trying to reduce a program to a simpler program that does not have that construct.
    + Function call is replaced with body.
    + =if= is replaced with true or false question.
    + =cond= is replaced with one answer.


* Data Definitions
+ Data definitions explain how information is represented as data.


+ Imagine this - You're working on a program written by somebody else that simulates traffic. You see this function:
  #+BEGIN_SRC racket
(define (next-color c)
  (cond [(= c 0) 2]
        [(= c 1) 0]
        [(= c 2) 1]))
  #+END_SRC
  + You may be confused as to what this function does.
    + The name =next-color= seems to produce the next colour but it's not very clear.


+ Now lets imagine the same function, but with the HtDF recipe.
  #+BEGIN_SRC racket
;; Part of a trafic simulation

;; Natural -> Natural
;; produce next color of traffic light
(check-expect (next-color 0) 2)
(check-expect (next-color 1) 0)
(check-expect (next-color 2) 1)

; (define (next-color c) 0) ; stub

; (define (next-color c)    ; template
;    (...c))

(define (next-color c)
  (cond [(= c 0) 2]
        [(= c 1) 0]
        [(= c 2) 1]))
  #+END_SRC
  + The signature says that it takes a natural.
    + Is it possible to call the function with =3=?
    + The examples don't show anything other than 0, 1, or 2.
    + The examples themselves are vague as to their meaning.
      + The examples may show that the function is most likely "correct", but what does it even mean when you input =0=, and get returned a =2=?


** The problem domain
+ Using the *problem domain*, we can understand this problem.
  + In any program, we have the *problem domain*.
    + In this case, the problem domain pertains to traffic, the simluation of traffic, traffic lights, and cars, raods, and etc.


+ Within the problem domain, we have information.
+ Within this context, we may be able to tell that a certain colour will be red.


+ However, within the program, there are no red lights, green lights, or blue lights.
+ Within the program, we have data, the natural number =0=.

  | Problem Domain | Program |
  |----------------+---------|
  | Information    | Data    |
  | A light is red | 0       |


+ Here, we represent information in the problem domain using data in the program.
  + The natural number =0= represents that some light may be red.


+ The inverse of that relationship is that we can interpret the natural number =0=.
  + If we're told that the natural number =0= represents information about a light, we can interpret it as meaning that the light is red.


+ Now, if you know, or have been told that =0= represents the colour red, it can be guessed that a =1= will represent yellow, and that =2= will represent green.


+ Instead of being given the information, you can use something called a *data definition.*
  + Data definitions describe how we are representing information as data.



+ Here is a third version of the same program that uses a data definition.
  #+BEGIN_SRC racket
;; Data definitions:

;; TLColor is one of:   ; type comment
;; - 0
;; - 1
;; - 2
;; interp. color of a traffic light - 0 is red, 1 yellow, 2 green  ; interpretation
#;
(define (fn-for-tlcolor c)  ; template skeleton
  (cond [(= c 0) (...)]
        [(= c 1) (...)]
        [(= c 2) (...)]))



;; Functions:

;; TLColor -> TLColor
;; produce next color of traffic light
(check-expect (next-color 0) 2)
(check-expect (next-color 1) 0)
(check-expect (next-color 2) 1)

; (define (next-color c) 0)  ; stub

; Template from TLColor

(define (next-color c)
  (cond [(= c 0) 2]
        [(= c 1) 0]
        [(= c 2) 1]))
  #+END_SRC
+ Here, the file is divided into two parts.
  1. The data definitions.
     + We have one data definition here.

     + The data defintions starts with a /type comment/.
       + /type commment/ defines a new type name.
         + Here it's used to define =TLColor=.
       + It also shows how to form that data.
         + Here, it's either 0, 1, or 2.

     + /Interpretation/ explains how to interpret data of this type as information thereby establishing the information/data correspondence.
       + Here, it says that a =TLColor= is the color of a traffic light, and =0= means red, =1= means yellow, and =2= means green.

     + The last part is a /template skeleton/ for one-argument functions that consume data of this type.
       + This template is for operating on =TlColor=.
       + This template is saying that if you're designing a function that operates on =TLColor=, then there's three cases.
         1. The color is zero.

         2. The color is one.

         3. The color is two.
            
  2. The functions.
     + The signature says this function consumes a =TLColor= and produces a =TLColor=.
       + The question from earlier is answered, this function can't consume a four or a three because it can only consume a =TLColor=, which only includes 0, 1, and 2.

     + Now this function is easy to understand. It takes a =TLColor= and produces another, meaning that if you input a colour of zero, which is red, it will produce a two, which means green.
       + After a red light, it's green.

     + The next color is =1=. or yellow, and that produces a =0=, which means red.

     + Next is the template, it comes from =TLColor= since the function consumes a =TLColor=.
       + From now on, most templates will be determined by the type of data it consumes.



+ A data definition describes:
  1. How to from data of a new type
  2. How to represent information as data
  3. How to interpret data as information
  4. Template for operating on data


+ A data definition simplifies functions:
  1. Restricts data consumed
  2. Restricts data produced
  3. Helps generate examples
  4. Provides template


* Atomic Non-Distinct
+ First example of using HtDD recipe and Data Driven Templates recipes.


+ Imagine that you are designing a program that, among other things, has information about the names of cities in its problem domain.
  + Design a data definition to represent the name of a city.

+ When we design a data definition, we need to decide the form of the data that we're going to represent.
  + /Examples/
    + Vancouver
    + Boston
+ City names such as Vancouver and Boston are atomic.
  + You cannot take it apart into pieces that are still meaningful to the problem domain


+ A data definition consists of four or five parts.


+ A possible *structure definition* (not until week 3)
+ A *type comment* that defines a new type name and describes how to form data of that type.
   #+BEGIN_SRC racket
;; CityName is String
#+END_SRC
| Information | DATA        |
|-------------+-------------|
| Vancouver   | "Vancouver" |
| Boston      | "Boston"    |
+ An *interpretation* that describes the correspondence between information and data.
  #+BEGIN_SRC racket
;; interp. the name of a city
  #+END_SRC
+ One ore more *examples* of the data.
  #+BEGIN_SRC racket
(define CN1 "Boston")
(define CN2 "Vancouver")
  #+END_SRC
+ A *template* for a 1 argument function operating on this type of data.
  + For a given =TypeName= the data driven template is:
    #+BEGIN_SRC racket
(define (fn-for-type-name x)
  <body>)
    #+END_SRC
  + Therefore, the template for this example will be
    #+BEGIN_SRC racket
(define  (fn-for-city-name CN)
  (... CN)
  )

;; Template rules used:
;; - atomic non-distinct: String
    #+END_SRC


------
#+BEGIN_SRC racket
;; CityName is String
;; interp. the name of a city
(define CN1 "Boston")
(define CN2 "Vancouver")

(define  (fn-for-city-name CN)
  (... CN)
  )

;; Template rules used:
;; - atomic non-distinct: String

* HtDF With Non-Primitive Data
* HtDF X Structure of Data Orthogonality
* Interval
* Enumeration
* Itemization
* HtDF with Interval
* HtDF with Enumeration
* HtDF with Itemization
* Struture of Information Flows Through

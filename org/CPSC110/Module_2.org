#+TITLE: Module 2
#+SETUPFILE: ../template-1.org
Created on 2020-08-06/00:36

* Learning Goals
+ Be able to use the How to Design Data Definitions (HtDD) recipe to design data  definitions for atomic data.
+ Be able to identify problem domain information that should be represented as simple atomic data, intervals, enumerations, itemizations and mixed data itemizations.
+ Be able to use the Data Driven Templates recipe to generate templates for functions operating on atomic data
+ Be able to use the How to Design Functions (HtDF) recipe to design functions operating on atomic data.


* cond Expressions
+ =cond= expression simplify writing conditional expressions with more than 2 cases.
#+BEGIN_SRC racket
;; To form cond expression
  (cond [<expression> <expression>]
        ...) ; one or more questions answer pairs

;; Each question must evaluate to a boolean
;; Last question can be else.

#+END_SRC

+ Given the following:
  #+BEGIN_SRC racket
(require 2htdp/image)

;; cond-starter.rkt

(define I1 (rectangle 10 20 "solid" "red"))
(define I2 (rectangle 20 20 "solid" "red"))
(define I3 (rectangle 20 10 "solid" "red"))

;; Image -> String
;; produce shape of image, one of "tall", "square" or "wide"
(check-expect (aspect-ratio I1) "tall")
(check-expect (aspect-ratio I2) "square")
(check-expect (aspect-ratio I3) "wide")

;(define (aspect-ratio img) "")  ;stub

;(define (aspect-ratio img)      ;template
;  (... img))

(define (aspect-ratio img)
  (if (> (image-height img) (image-width img))
      "tall"
      (if (= (image-height img) (image-width img))
          "square"
          "wide")))
  #+END_SRC


+ This function defines three constants, I1, I2, I3.
  + All three are rectangles


+ The function consumes an image and produces a string, one of "tall", "square", or "wide".
+ The issue with the function above is that there are 2 cases nested within the =if=.


+ =cond= is a /multi-armed conditional./
  + It can have any number of cases all at the same level.

  #+BEGIN_SRC racket
(require 2htdp/image)

#;
(define (aspect-ratio img)
  (if (> (image-height img) (image-width img))
      "tall"
      (if (= (image-height img) (image-width img))
          "square"
          "wide")))

(define (aspect-ratio img) ; () and [] balance each other.
;; Both are equavalent but by convention, we use[ ] around question/answer pairs in cond.
  (cond [(> (image-height img) (image-width img)) "tall"]
        [(= (image-height img) (image-width img)) "square"]
        [else "wide"]))
  #+END_SRC


** Evaluating cond
+ *To evaluate a cond expression*
#+BEGIN_SRC racket
(cond [(> 1 2) "bigger"]
      [(= 1 2) "equal"]
      [(< 1 2) "smaller"])

(cond [false "bigger"]
      [(= 1 2) "equal"]
      [(< 1 2) "smaller"])

(cond [(= 1 2) "equal"]
      [(< 1 2) "smaller"])

(cond [false "equal"]
      [(< 1 2) "smaller"])

(cond [true "smaller"])

"smaller"
;done evaluating
#+END_SRC
------
1. If there are no question/answer pairs, signal an error.
2. If the first question is not a value, evaluate it and replace it with its value.
   * That is, replace the entire cond with a new cond in which the first question has been replaced by its value.
     #+BEGIN_SRC racket
(cond [false "bigger"]
      [(= 1 2) "equal"]
      [(< 1 2) "smaller"])
#+END_SRC

3. If the first question is true or else, replace the entire cond expression with the first answer.
4. If the first question is false drop the first question/answer pair.
   * That is, replace the cond with a new cond that does not have the first question/answer pair.
5. Since the first question is not, ture or false, signal an error.



+ For function calls, =if= and =cond= all work by trying to reduce a program to a simpler program that does not have that construct.
    + Function call is replaced with body.
    + =if= is replaced with true or false question.
    + =cond= is replaced with one answer.


* Data Definitions
* Atomic Non-Distinct
* HtDF With Non-Primitive Data
* HtDF X Structure of Data Orthogonality
* Interval
* Enumeration
* Itemization
* HtDF with Interval
* HtDF with Enumeration
* HtDF with Itemization
* Struture of Information Flows Through
